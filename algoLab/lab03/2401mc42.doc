Task 01
|||||||||||||||||||| STARTS HERE |||||||||||||||||||||||||

#include <bits/stdc++.h>
using namespace std;

void newSearch(vector<int> arr, int target) {
    int a = 0, b = arr.size() - 1;
    while (a <= b) {
        int k = (a + b) / 2;
        if (arr[k] == target) {
            cout <<k<< "\n";
            return;
        }
        if (arr[k] > target) {
            b = k - 1;
        } else {
            a = k + 1;
        }
    }
    cout << "Number not present \n";
}

int main() {
    int n ;
    cin>>n;
    vector<int> a(n);
    for(auto &x: a)cin>>x;
    int target ;
    cin>>target;
    newSearch(a , target);
    return 0;
}

|||||||||||||||||||| END HERE |||||||||||||||||||||||||



Task 02 
|||||||||||||||||||| STARTS HERE |||||||||||||||||||||||||

#include <bits/stdc++.h>
using namespace std;
#define int long long

string multiplySingleDigits(string x , string y){
    return to_string((x[0]-'0')*(y[0]-'0'));
}

string addTwoString(string a , string b){
    string result = "";
    int carry = 0;
    int i = a.size() - 1, j = b.size() - 1;
    while (i >= 0 || j >= 0 || carry) {
        int sum = carry;
        if (i >= 0) sum += a[i--] - '0';
        if (j >= 0) sum += b[j--] - '0';
        result = result + to_string((sum % 10));
        carry = sum / 10;
    }
    reverse(result.begin(), result.end());
    return result;

}

string shift(string a,int v){
    while(v>0){
        a = a + "0";
        v--;
    }
    return a;
}
string karatsuba(string x,string y){
    while (x.size() > 1 && x[0] == '0') {
        x.erase(x.begin());
    }
    while (y.size() > 1 && y[0] == '0') {
        y.erase(y.begin());
    }
    int lenx = x.size();
    int leny = y.size();
    if(lenx==1 && leny==1){
        return multiplySingleDigits(x,y);
    }
    int n = max(lenx, leny);
    if(n%2==1){
        n++;
    }
    while(lenx<n){
        x = "0" + x;
        lenx++;
    }
    while(leny<n){
        y = "0" + y;
        leny++;
    }
    string a = x.substr(0, n-n/2);
    string b = x.substr(n/2);
    string c = y.substr(0, n/2);
    string d = y.substr(n/2);
    string ac = karatsuba(a,c);
    string bd = karatsuba(b,d);
    string ad = karatsuba(a,d);
    string bc = karatsuba(b,c);
    return addTwoString(addTwoString(shift(ac,n),shift(addTwoString(ad,bc),n/2)),bd);
}

signed main() {
    cout<<"Enter first number - ";
    string x,y;
    cin>>x;
    cout<<"Enter second number - ";
    cin>>y;
    string ans = karatsuba(x,y);
    while(ans.size()>1 && ans[0]=='0'){
        ans.erase(ans.begin());
    }
    cout<<"Answer = "<<ans<<"\n";
}

|||||||||||||||||||| END HERE |||||||||||||||||||||||||